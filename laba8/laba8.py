import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ config/.env ===
load_dotenv(r"C:\Users\user\PycharmProjects\PythonProject6\.env")
TOKEN = os.getenv("BOT_TOKEN")

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–¢–∏ –∑–∞—Ö–æ–¥–∏—à —É —Å—Ç–∞—Ä–µ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è... –ü–æ–≤—ñ—Ç—Ä—è –≥—É—Å—Ç–µ –≤—ñ–¥ –ø–∏–ª—É –π —Ç–∏—à—ñ.\n"
        "–ü–µ—Ä–µ–¥ —Ç–æ–±–æ—é ‚Äî —Ç—Ä–∏ –æ–±‚Äô—î–∫—Ç–∏:\n"
        "ü™û –í—ñ–∫–Ω–æ, üóø –°—Ç–∞—Ç—É—è, üñº –ö–∞—Ä—Ç–∏–Ω–∞.\n\n"
        "–©–æ –æ–≥–ª—è–Ω–µ—à?"
    )
    buttons = [
        [InlineKeyboardButton("ü™û –í—ñ–∫–Ω–æ", callback_data="window")],
        [InlineKeyboardButton("üóø –°—Ç–∞—Ç—É—è", callback_data="statue")],
        [InlineKeyboardButton("üñº –ö–∞—Ä—Ç–∏–Ω–∞", callback_data="painting")]
    ]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons))

# === –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É ===
async def choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "window":
        text = (
            "–¢–∏ –ø—ñ–¥—Ö–æ–¥–∏—à –¥–æ –≤—ñ–∫–Ω–∞. –°–∫–ª–æ –∫–∞–ª–∞–º—É—Ç–Ω–µ, –∞–ª–µ –∫—Ä—ñ–∑—å –Ω—å–æ–≥–æ –≤–∏–¥–Ω–æ –º—ñ—Å—è—á–Ω–µ —Å—è–π–≤–æ.\n"
            "–ù–∞ –º–∏—Ç—å –∑–¥–∞—î—Ç—å—Å—è, —â–æ —É –≤—ñ–¥–±–∏—Ç—Ç—ñ –±–ª–∏—Å–Ω—É–ª–∏ —á–∏—ó—Å—å –æ—á—ñ..."
        )
    elif query.data == "statue":
        text = (
            "–°—Ç–∞—Ç—É—è —Å—Ç–æ—ó—Ç—å –ø–æ—Å–µ—Ä–µ–¥ –∑–∞–ª—É. –í–æ–Ω–∞ –¥–∏–≤–Ω–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∞.\n"
            "–ö–æ–ª–∏ —Ç–∏ –Ω–∞—Ö–∏–ª—è—î—à—Å—è –±–ª–∏–∂—á–µ ‚Äî –∑–¥–∞—î—Ç—å—Å—è, —â–æ —ó—ó –≥—É–±–∏ –ª–µ–¥—å —Ä—É—Ö–∞—é—Ç—å—Å—è..."
        )
    elif query.data == "painting":
        text = (
            "–ö–∞—Ä—Ç–∏–Ω–∞ —Å—Ç–∞—Ä–∞ –π –ø–æ—Ç—Ä—ñ—Å–∫–∞–Ω–∞. –ù–∞ –Ω—ñ–π ‚Äî —Å—ñ–º‚Äô—è, —è–∫–∞ –ø–æ–∑—É—î –±—ñ–ª—è —Ü—å–æ–≥–æ –∂ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è.\n"
            "–Ü —Å–µ—Ä–µ–¥ –Ω–∏—Ö ‚Äî —Ö—Ç–æ—Å—å, —Å—Ö–æ–∂–∏–π –Ω–∞ —Ç–µ–±–µ."
        )
    else:
        text = "–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–±—ñ—Ä."

    await query.edit_message_text(text)

# === –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
def main():
    if not TOKEN:
        raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤ config/.env —î BOT_TOKEN.")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(choice))

    app.run_polling()

if __name__ == "__main__":
    main()
